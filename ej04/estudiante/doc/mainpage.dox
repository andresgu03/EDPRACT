/*! \mainpage Practica 4: El juego de las letras. Estructura de árbol para el diccionario y Solver.

# Introducción

__El juego de las letras__ \n En esta práctica querremos representar el famoso juego del _Scrabble_. Este juego consiste en formar palabras de un idioma dadas ciertas letras. Cada letra lleva asociada una puntuación y el objetivo es, o bien conseguir el mayor número de puntos posibles al formar una palabra, o bien conseguir la palabra más larga posible.\n

En esta práctica modificaremos la implementación del TDA Dictionary de la práctica anterior utilizando como contenedor subyacente un árbol LCRS (Left-Child Right-Sibling). De esta forma, podremos almacenar nuestro diccionario con menos espacio y crear un solver más eficiente.

Concretamente:
    1. Necesitaremos almacenar menos información para representar el diccionario completo (lo podremos comprobar contando el número de letras almacenadas en total).
    2. Podremos recuperar más rápidamente las palabras que se pueden formar dado un vector de letras, ya que la estructura de árbol en la que almacenaremos el diccionario nos permitirá explorar las posibles soluciones de una forma bastante eficiente.

# Ejecutables

1. diccionario.cpp
    - Recibe como parámetro un archivo que contiene un diccionario. Creará el Dictionary.
    - Imprime por pantalla el contenido de todo el diccionario.
    - Ejemplo: ./diccionario ../data/diccionario_mini.txt

    <pre>
           <code>
                a
                ama
                amar
                amo
                amor
                cal
                col
                coz
           </code>
        </pre>


2. cantidad_letras.cpp

    - Recibe como argumentos un fichero de diccionario y un fichero de letras. Con esa información:
        - Creará el LettersSet y el Dictionary.
        - Para cada letra del diccionario calculará el número de veces que se usa esa letra y el número de ocurrencias de la letra.

    - Ejemplo: ./cantidad_letras ../data/diccionario_mini.txt ../data/letras_mini.txt

    <pre>
       <code>
          Letra Usos Ocurrencias
          A	    8	 3
          C	    3	 1
          L	    2	 2
          M	    4	 1
          O	    4	 2
          R	    2	 2
          Z	    1	 1
       </code>
    </pre>

3. partida_letras.cpp

    - Recibe cuatro argumentos:
        1. Ruta al archivo que contiene el diccionario.
        2. Ruta al archivo que contiene las letras y su puntuación.
        3. Modo de juego (L = longitud, P = puntuación).
        4. Cantidad de letras para la partida.

    - El programa se encargará de construir:
        - El LettersSet para la partida a partir del archivo de letras.
        - El Dictionary con las palabras que se consideran soluciones correctas.
        - El Solver que va a jugar la partida.
        - La LettersBag que se utilizará para extraer las letras.

    - Una vez construidos los TDAs necesarios:
        - Extraerá las letras con las que se jugará la partida
        - Utilizará el Solver para buscar las soluciones
        - Imprimirá por pantalla tanto las letras para la partida como las mejores soluciones que se pueden obtener con dichas letras y la puntuación de dichas soluciones.

    - Ejemplo: ./partida_letras ../data/diccionario.txt ../data/letras.txt L 9

    <pre>
       <code>
          LETRAS DISPONIBLES:
          A E A O U E E E T
          SOLUCIONES:
          aeta
          ateo
          auto
          PUNTUACION:
          4
       </code>
    </pre>

4. palabras_validas_diccionario.cpp
    - Recibe como argumentos:
        - Un fichero de texto que contiene a un diccionario.
        - Letras que se usarán para ver las palabras válidas formadas con dichas letras en el diccionario.

    - El programa se encargará de construir:
            - El Dictionary con las palabras.
            - Un vector con las letras que se consideran.

    - El programa devolverá un listado de las palabras del diccionario que se pueden formar con las letras introducidas.

    - Ejemplo: ./palabras_validas_diccionario ../data/diccionario_mini.txt a c l z o

    <pre>
           <code>
              a
              cal
              col
              coz
           </code>
        </pre>

5. partida_letras_eficiente.cpp

    - NOTA: Al ser una implementación alternativa (más eficiente) de partida_letras.cpp, el resultado esperado es el mismo, así como el formato de entrada y salida.

    - Recibe cuatro argumentos:
        1. Ruta al archivo que contiene el diccionario.
        2. Ruta al archivo que contiene las letras y su puntuación.
        3. Modo de juego (L = longitud, P = puntuación).
        4. Cantidad de letras para la partida.

    - El programa se encargará de construir:
        - El LettersSet para la partida a partir del archivo de letras.
        - El Dictionary con las palabras que se consideran soluciones correctas.
        - El Solver que va a jugar la partida.
        - La LettersBag que se utilizará para extraer las letras.

    - Una vez construidos los TDAs necesarios:
        - Extraerá las letras con las que se jugará la partida
        - Utilizará el Solver para buscar las soluciones
        - Imprimirá por pantalla tanto las letras para la partida como las mejores soluciones que se pueden obtener con dichas letras y la puntuación de dichas soluciones.

    - Ejemplo: ./partida_letras_eficiente ../data/diccionario.txt ../data/letras.txt L 9

    <pre>
       <code>
          LETRAS DISPONIBLES:
          A E A O U E E E T
          SOLUCIONES:
          aeta
          ateo
          auto
          PUNTUACION:
          4
       </code>
    </pre>

*/
